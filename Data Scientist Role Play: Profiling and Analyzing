Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000

select count(*) from attribute

ii. Business table = 10,000

select count(*) from business

iii. Category table = 10,000

select count(*) from category

iv. Checkin table = 10,000

select count(*) from checkin

v. elite_years table = 10,000

select count(*) from elite_years

vi. friend table = 10,000

select count(*) from friend

vii. hours table = 10,000

select count(*) from hours

viii. photo table = 10,000

select count(*) from photo

ix. review table = 10,000

select count(*) from review

x. tip table = 10,000

select count(*) from tip

xi. user table = 10,000

select count(*) from user
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000

select count(distinct(id)) from business

ii. Hours = 1,562

select count(distinct(business_id)) from hours

iii. Category = 2,643

select count(distinct(business_id)) from category

iv. Attribute = 1,115

select count(distinct(business_id)) from attribute

v. Review = 10,000

select count(distinct(id)) from review
note: chose the primary key

vi. Checkin = 493

select count(distinct(business_id)) from checkin

vii. Photo = 6,493

select count(distinct(business_id)) from photo
note: chose the foregin key

viii. Tip = 537

select count(distinct(user_id)) from tip
note: chose user_id foreign key

ix. User = 10,000

select count(distinct(id)) from user

x. Friend = 11

select count(distinct(user_id)) from friend

xi. Elite_years = 2,780

select count(distinct(user_id)) from elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

	select count(*) from user where name is null
	select count(*) from user where review_count is null
	select count(*) from user where yelping_since is null
	select count(*) from user where useful is null
	select count(*) from user where funny is null
	select count(*) from user where cool is null
	select count(*) from user where fans is null
	select count(*) from user where average_stars is null
	select count(*) from user where compliment_hot is null
	select count(*) from user where compliment_more is null
	select count(*) from user where compliment_profile is null
	select count(*) from user where compliment_cute is null
	select count(*) from user where compliment_list is null
	select count(*) from user where compliment_note is null
	select count(*) from user where compliment_plain is null
	select count(*) from user where compliment_cool is null
	select count(*) from user where compliment_funny is null
	select count(*) from user where compliment_writer is null
	select count(*) from user where compliment_photos is null
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: .0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	select b.city,count(*) from business as b
	left join review as r on b.id = r.business_id
	group by b.city
	order by count(*) desc
	
	Copy and Paste the Result Below:
	
	+-----------------+----------+
| city            | count(*) |
+-----------------+----------+
| Las Vegas       |     1622 |
| Phoenix         |     1011 |
| Toronto         |      994 |
| Scottsdale      |      505 |
| Charlotte       |      471 |
| Pittsburgh      |      354 |
| Montréal        |      338 |
| Mesa            |      306 |
| Henderson       |      281 |
| Tempe           |      264 |
| Edinburgh       |      239 |
| Chandler        |      238 |
| Gilbert         |      193 |
| Cleveland       |      190 |
| Glendale        |      188 |
| Madison         |      181 |
| Mississauga     |      151 |
| Stuttgart       |      141 |
| Peoria          |      105 |
| Markham         |       80 |
| North Las Vegas |       72 |
| Champaign       |       71 |
| North York      |       65 |
| Surprise        |       60 |
| Richmond Hill   |       54 |
+-----------------+----------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select b.city,r.stars, count(*) from business as b
left join review as r on b.id = r.business_id
where b.city = 'Avon'
group by b.city, r.stars
order by count(*) desc


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+------+-------+----------+
| city | stars | count(*) |
+------+-------+----------+
| Avon |  None |       10 |
+------+-------+----------+

NOTE: I purposefully included the city name even though it says 2 columns because without it you lose track
of what city you're talking about it.


ii. Beachwood

SQL code used to arrive at answer:

select b.city,r.stars, count(*) from business as b
left join review as r on b.id = r.business_id
where b.city = 'Beachwood'
group by b.city, r.stars
order by count(*) desc


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-----------+-------+----------+
| city      | stars | count(*) |
+-----------+-------+----------+
| Beachwood |  None |       13 |
| Beachwood |     3 |        1 |
+-----------+-------+----------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	select u.id,u.name,count(*) 
	from user as u left join review as r on u.id = r.user_id
	group by u.id
	order by count(*) desc
	
		
	Copy and Paste the Result Below:
		
| id                     | name      | count(*) |
+------------------------+-----------+----------+
| -0udWcFQEt2M8kM3xcIofw | Kaitlan   |        2 |
| -Biq3Dt8YhkRJEO_ITrvww | Christina |        2 |
| -l4iRZ2wYow39RTevk21Dg | Craig     |        2 |
| ---1lKK3aKOuomHnwAkAow | Monera    |        1 |
| ---94vtJ_5o_nikEs6hUjg | Joe       |        1 |
| ---PLwSf5gKdIoVnyRHgBA | Rae       |        1 |
| ---cu1hq55BP9DWVXXKHZg | Jeb       |        1 |
| ---fhiwiwBYrvqhpXgcWDQ | Jed       |        1 |
| ---udAKDsn0yQXmzbWQNSw | Carolyn   |        1 |
| --0RtXvcOIE4XbErYca6Rw | Ryan      |        1 |
| --0WZ5gklOfbUIodJuKfaQ | Scott     |        1 |
| --0kuuLmuYBe3Rmu0Iycww | Talia     |        1 |
| --0sXNBv6IizZXuV-nl0Aw | Joe       |        1 |
| --104qdWvE99vaoIsj9ZJQ | John      |        1 |
| --1av6NdbEbMiuBr7Aup9A | Ron       |        1 |
| --1mPJZdSY9KluaBYAGboQ | Bryan     |        1 |
| --26jc8nCJBy4-7r3ZtmiQ | Patti     |        1 |
| --2HUmLkcNHZp0xw6AMBPg | Kristin   |        1 |
| --2bpE5vyR-2hAP7sZZ4lA | Gary      |        1 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |        1 |
| --3B8LdT1NCD-bPkwS5-5g | Cynthia   |        1 |
| --3WaS23LcIXtxyFULJHTA | Kristie   |        1 |
| --3l8wysfp49Z2TLnyT0vg | Benjamin  |        1 |
| --3oMd6gjXpAzhjLBrsVCQ | Mrme      |        1 |
| --41c9Tl0C9OGewIR7Qyzg | Tamaki    |        1 |
+------------------------+-----------+----------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	No. There are users with lots of fans with only 1 review.

	+------------------------+-----------+------+----------+
| id                     | name      | fans | count(*) |
+------------------------+-----------+------+----------+
| -0udWcFQEt2M8kM3xcIofw | Kaitlan   |    3 |        2 |
| -Biq3Dt8YhkRJEO_ITrvww | Christina |   27 |        2 |
| -l4iRZ2wYow39RTevk21Dg | Craig     |    1 |        2 |
| ---1lKK3aKOuomHnwAkAow | Monera    |   15 |        1 |
| ---94vtJ_5o_nikEs6hUjg | Joe       |    0 |        1 |
| ---PLwSf5gKdIoVnyRHgBA | Rae       |    0 |        1 |
| ---cu1hq55BP9DWVXXKHZg | Jeb       |    0 |        1 |
| ---fhiwiwBYrvqhpXgcWDQ | Jed       |    0 |        1 |
| ---udAKDsn0yQXmzbWQNSw | Carolyn   |    1 |        1 |
| --0RtXvcOIE4XbErYca6Rw | Ryan      |    0 |        1 |
| --0WZ5gklOfbUIodJuKfaQ | Scott     |    0 |        1 |
| --0kuuLmuYBe3Rmu0Iycww | Talia     |    2 |        1 |
| --0sXNBv6IizZXuV-nl0Aw | Joe       |    0 |        1 |
| --104qdWvE99vaoIsj9ZJQ | John      |    0 |        1 |
| --1av6NdbEbMiuBr7Aup9A | Ron       |    0 |        1 |
| --1mPJZdSY9KluaBYAGboQ | Bryan     |    0 |        1 |
| --26jc8nCJBy4-7r3ZtmiQ | Patti     |    0 |        1 |
| --2HUmLkcNHZp0xw6AMBPg | Kristin   |    0 |        1 |
| --2bpE5vyR-2hAP7sZZ4lA | Gary      |    0 |        1 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |        1 |
| --3B8LdT1NCD-bPkwS5-5g | Cynthia   |    0 |        1 |
| --3WaS23LcIXtxyFULJHTA | Kristie   |   10 |        1 |
| --3l8wysfp49Z2TLnyT0vg | Benjamin  |    2 |        1 |
| --3oMd6gjXpAzhjLBrsVCQ | Mrme      |    0 |        1 |
| --41c9Tl0C9OGewIR7Qyzg | Tamaki    |   23 |        1 |
+------------------------+-----------+------+----------+

 The users with the most fans also only have 1 review:

 +------------------------+-----------+------+----------+
| id                     | name      | fans | count(*) |
+------------------------+-----------+------+----------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |        1 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |        1 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |        1 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |        1 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |        1 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |        1 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |        1 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |        1 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |        1 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |        1 |
| -B-QEUESGWHPE_889WJaeg | Mark      |  115 |        1 |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |  111 |        1 |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |  105 |        1 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |  104 |        1 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |  101 |        1 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |  101 |        1 |
| -4viTt9UC44lWCFJwleMNQ | Ben       |   96 |        1 |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |   89 |        1 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |   85 |        1 |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |   84 |        1 |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |   81 |        1 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |   80 |        1 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |   78 |        1 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |   76 |        1 |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |   73 |        1 |
+------------------------+-----------+------+----------+


select u.id,u.name,fans, count(*) 
from user as u left join review as r on u.id = r.user_id
group by u.id
order by fans desc
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: love

	
	SQL code used to arrive at answer:
	select count(*) from review where text like '% love %' = 1080
	select count(*) from review where text like '% hate %' = 82

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	select id,name, fans from user
	order by fans desc
	limit 10
	
	
	Copy and Paste the Result Below:

	| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+

	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:

	select id,name,fans, useful, funny, (useful+funny)/fans,
  		CASE
    		when ((useful+funny)*1.0/fans*1.0 <= .25) then 'low'
    		when ((useful+funny)*1.0/fans*1.0 > .25) and ((useful+funny)*1.0/fans*1.0 <= .75) then 'medium'
    		when ((useful+funny)*1.0/fans*1.0 > .75) then 'high'
 		END as perc
	from user
	order by fans desc
	limit 25
	
	
	Copy and Paste the Result Below:

	+------------------------+-----------+------+--------+--------+---------------------+--------+
| id                     | name      | fans | useful |  funny | (useful+funny)/fans | perc   |
+------------------------+-----------+------+--------+--------+---------------------+--------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |   3226 |   2554 |                  11 | high   |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |    257 |    138 |                   0 | high   |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 | 122921 | 122419 |                 788 | high   |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |  17524 |   2324 |                  78 | high   |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |   4834 |   6646 |                  66 | high   |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |     48 |     13 |                   0 | medium |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |   1062 |    672 |                  13 | high   |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |   9363 |   9361 |                 148 | high   |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |   9851 |   7606 |                 140 | high   |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |    455 |    150 |                   5 | high   |
| -B-QEUESGWHPE_889WJaeg | Mark      |  115 |   4008 |    570 |                  39 | high   |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |  111 |   1366 |    984 |                  21 | high   |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |  105 |    120 |    112 |                   2 | high   |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |  104 |   2995 |   1188 |                  40 | high   |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |  101 |    158 |    164 |                   3 | high   |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |  101 |   7850 |   5851 |                 135 | high   |
| -4viTt9UC44lWCFJwleMNQ | Ben       |   96 |   1180 |   1155 |                  24 | high   |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |   89 |   3177 |   2736 |                  66 | high   |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |   85 |    158 |     34 |                   2 | high   |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |   84 |   2161 |   2091 |                  50 | high   |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |   81 |    820 |    753 |                  19 | high   |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |   80 |   1091 |    774 |                  23 | high   |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |   78 |      9 |     18 |                   0 | medium |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |   76 |   1166 |    220 |                  18 | high   |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |   73 |     13 |     10 |                   0 | medium |
+------------------------+-----------+------+--------+--------+---------------------+--------+

+------------------------+---------+------+--------+-------+---------------------+------+
| id                     | name    | fans | useful | funny | (useful+funny)/fans | perc |
+------------------------+---------+------+--------+-------+---------------------+------+
| ---94vtJ_5o_nikEs6hUjg | Joe     |    0 |      0 |     0 |                None | None |
| ---cu1hq55BP9DWVXXKHZg | Jeb     |    0 |     34 |    14 |                None | None |
| ---fhiwiwBYrvqhpXgcWDQ | Jed     |    0 |      2 |     3 |                None | None |
| ---PLwSf5gKdIoVnyRHgBA | Rae     |    0 |      1 |     0 |                None | None |
| --0RtXvcOIE4XbErYca6Rw | Ryan    |    0 |      0 |     0 |                None | None |
| --0sXNBv6IizZXuV-nl0Aw | Joe     |    0 |      0 |     0 |                None | None |
| --0WZ5gklOfbUIodJuKfaQ | Scott   |    0 |      0 |     0 |                None | None |
| --104qdWvE99vaoIsj9ZJQ | John    |    0 |      0 |     0 |                None | None |
| --1av6NdbEbMiuBr7Aup9A | Ron     |    0 |      0 |     0 |                None | None |
| --1mPJZdSY9KluaBYAGboQ | Bryan   |    0 |      0 |     0 |                None | None |
| --26jc8nCJBy4-7r3ZtmiQ | Patti   |    0 |     15 |    13 |                None | None |
| --2bpE5vyR-2hAP7sZZ4lA | Gary    |    0 |      0 |     0 |                None | None |
| --2HUmLkcNHZp0xw6AMBPg | Kristin |    0 |      7 |     1 |                None | None |
| --3B8LdT1NCD-bPkwS5-5g | Cynthia |    0 |      0 |     0 |                None | None |
| --3oMd6gjXpAzhjLBrsVCQ | Mrme    |    0 |      1 |     0 |                None | None |
| --44NNdtngXMzsxyN7ju6Q | Austin  |    0 |      0 |     0 |                None | None |
| --4rAAfZnEIAKJE80aIiYg | Mesut   |    0 |     12 |     5 |                None | None |
| --4ww39MLTS1SBRmCrSmww | Lissa   |    0 |      0 |     0 |                None | None |
| --56y1InAvNoQOD6YYrhVQ | Tara    |    0 |      0 |     1 |                None | None |
| --5BsHjOVLIGoTwjol-V2w | Lyndsey |    0 |      1 |     0 |                None | None |
| --5ihAtBE4kI5Gch9383qA | Annie   |    0 |      1 |     0 |                None | None |
| --5ox2OhSAADcB_uAEOYFw | Daniece |    0 |      0 |     0 |                None | None |
| --5XzJ2pRsVVJiJUfzZlgQ | Alex    |    0 |      1 |     0 |                None | None |
| --6D_IuxyKTN53pHi904ag | Mary    |    0 |      0 |     0 |                None | None |
| --6kLBBsm0GPM9vIB2YBDw | Garen   |    0 |      0 |     0 |                None | None |
+------------------------+---------+------+--------+-------+---------------------+------+	
	
	Please explain your findings and interpretation of the results:

	I found this question to be confusing and somewhat ambiguous and I'm not sure if I interpreted it correctly.

	Starting with the second question: "out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?" If you look at the results in the first query above, all 10 of the top 10 highest fan getters have at least someone
	who said that they were useful OR funny. So the literal answer seems to be 100%.

	Back to the first question: "Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?". So i tried to quantify the ratio of fans to how many times that user had people say they
	were either useful or funny. I created this value as (funny+useful)/fans. If you look at the top 25 fan getters and this metric and then run the same query above for the bottom fan getters (change desc to asc in the query) it definitely shows 
	that people with high number of fans definitely have higher values of the ratio than people without fans so i would say "yes" there is a correlation between getting fans and people finding you useful or funny, at least in general.

	I was confused by the ranges of percentages and I thought that the question wanted me to write a CASE statement to bin users
	based on the key but I wasnt able to understand "percentage of what" in the bins. So there is a CASE part of the query that bins on percentage but the metric i used wasnt a percentage and therefor the binning isnt very useful. I left it in the query
	in case the question was intended to show that I understood how CASE could be used for binning even if I misunderstood
	what this question was asking.
	
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.


I picked Category = 'food'
I picked City = "Charlotte"

	
i. Do the two groups you chose to analyze have a different distribution of hours?

For business in charlotte it's not possible to tell any different distribtuion of hours because the only
businesses in Charlotte that have hours in the hours table is one in the 2-3 star range. No businesses in charlotte with 4-5 stars had hours listed so there is nothing to compare.

For businesses of category food the businesses with the lower star ratings all are open 5 days a week and tend to open early
in the morning and close somewhere after dinner time. For the high star businesses, 3 of the 4 open 5 days as week and 3 of the 4 have similar hours as the lower star places with the exception of 1, which appears to be a bar because it opens at 6pm and doesnt close to 2am. In general the hours of operational dont seem to be correlated to the star rating.


ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, businesses in charlotte have far more reviews overall than businesses in the food category. 
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

There are 468 businesses in charlotte across 26 neighborhoods and 28 postal codes. There are 29 total postal codes in Charlotte
so the businesses are distributed across the city.

The business in category food are primairy in 4 places: Pheonix, Vegas, Toronto and Cleveland. I therefor can infer that people
need to eat in both warm and cold places. #genius


SQL code used for analysis:

Business in Charlotte between 2 and 3 stars:
select b.name,b.stars,h.hours
from business as b left join hours as h on b.id = h.business_id
where b.city = 'Charlotte'
and (b.stars >= 2.0 and b.stars < 4.0)

Business in Charlote between 4 and 5 stars:
select b.name,b.stars,h.hours
from business as b left join hours as h on b.id = h.business_id
where b.city = 'Charlotte'
and (b.stars >= 4.0 and b.stars <= 5.0)

Business in category "Food" between 2 and 3 stars:
select b.name,b.stars,c.category, h.hours
from (business as b left join category as c on b.id = c.business_id)
     left join hours as h on b.id = h.business_id
where c.category = 'Food'
and (b.stars >= 2.0 and b.stars < 4.0)

Business in category "food" between 4 and 5 stars:
select b.name,b.stars,c.category, h.hours
from (business as b left join category as c on b.id = c.business_id)
     left join hours as h on b.id = h.business_id
where c.category = 'Food'
and (b.stars >= 4.0 and b.stars <= 5.0)

Total number of reviews for businesses in Charlotte:
select count(*)
from (business as b left join review as r on b.id = r.business_id)
where b.city = 'Charlotte'


Total number of reviews for businesses in category Food:
select count(*)
from (business as b left join review as r on b.id = r.business_id)
      left join category as c on b.id = c.business_id
where c.category = 'Food'


Where are the food businesses?:
select b.city, count(*)
from business as b left join category as c on b.id = c.business_id
where c.category = 'Food'
group by b.city

In what zipcodes are the businesses in Charlotte?:
select distinct(postal_code) from business where city='Charlotte'



		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

Currently open business get far more reivews than closed businesses.
         
         
ii. Difference 2:
         
 Open businesses only get slightly better average star ratings (3.67 vs 3.52). When you look at the 4+ rated businesses the average rating is again similar. When you look at the less then 4 star, again the same. Implying that the businesses are not closing because of primarily bad reviews        
         
SQL code used for analysis:

Reviews by operating status:
select is_open, sum(review_count)
from business
group by is_open

Average star rating by operating status:
select is_open, avg(stars)
from business
group by is_open

Average stars for high ranked businesses by operating status:
select is_open, avg(stars)
from business
where stars >= 4.0
group by is_open

Average stars for low ranked businesses by operating status:
select is_open, avg(stars)
from business
where stars < 4.0
group by is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

I chose to try and figure out if there is a type of user that is more likely to check in than others.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

The idea is that some people have a proclivity to checkin and thus tell other people where they are and some people do not. I
was wondering if there was anythink that I could find about the user that might indicate their probability to check in.

To do this i need to join users, through their reviews to the businesses they reviewed, and then to the checkins. This linking
isnt perfect because it requires that a person write a review to get into any visibility into whether they check in or not. There is no way to see the rate at which non-reviewers checkin so the results ccould be misleading. 
                           
                  
iii. Output of your finished dataset:

This was a fail because the data isnt there. During the analysis i attempted to get the data in these steps:

1) Get all the businesses that had someone checkin
2) Get all the reviews from those businesses
3) Get the users who made those reviews and prepare them as the input data set.

Outcome:

1) There are only 29 of the 10,000 businesses that had any checkins at all.
2) Of those 29 businesses, none of them had a review written about them. 
3) Therefor I have 0 people in my sample set of people who checked in and I've got no data to work with.
         
         
iv. Provide the SQL code you used to create your final dataset:

Businesses that had checkins:

select distinct(id) 
from business as b inner join checkin as c on b.id = c.business_id

Finding the reviews for those businesses:

select id
from review
where business_id in (
  select distinct(id) 
  from business as b inner join checkin as c on b.id = c.business_id )

note: this is where my hypothesis pooped the bed......


Find the users who made the reviews for business that had someone checkin:
select *
from user as u left join review as r on u.id  = r.user_id
where r.id in (
    select id
    from review
    where business_id in (
      select distinct(id) 
      from business as b inner join checkin as c on b.id = c.business_id )
    )

 note: again..... bed pooping because the data doesnt exist   

